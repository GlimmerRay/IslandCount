{"version":3,"sources":["components/Square.js","components/BaseGrid.js","App.js","index.js"],"names":["Square","className","this","props","React","Component","BaseGrid","state","turnedOn","rows","i","length","row","j","push","makeGrid","sleep","milliseconds","Promise","resolve","setTimeout","RandomGrid","fillRandomGrid","height","width","count","message","grid","getRandVal","console","log","setMessage","flashCell","incrementCount","dfsearch","setState","ms","cellValue","Math","random","onClick","countIslands","bind","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e952de2.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Square extends React.Component {\n    render() {\n      return <td className={this.props.className}></td>\n    }\n}","import React from 'react';\nimport { Square } from './Square.js';\n\n// Takes a 2d array of 1s and 0s\n// Each row must be of equal length\n// Constructs an html grid of squares with\n// 1s a certain className and 0s another className\nexport class BaseGrid extends React.Component {\n\tconstructor(props) {\n\t  super(props)\n\t  this.state = {\n\t\tturnedOn: this.props.turnedOn\n\t  }\n\t}\n  \n\tmakeGrid(turnedOn) {\n\t  \tvar rows = []\n\t  \tfor (var i=0; i<turnedOn[0].length; i++) {\n\t\t\tvar row = []\n\t\t\tfor (var j=0; j<turnedOn.length; j++) {\n\t\t\t\tif (turnedOn[j][i] == \"1\") {\n\t\t\t\t\trow.push(<Square className={\"squareOn\"}/>)\n\t\t\t\t} else if (turnedOn[j][i] == \"0\") {\n\t\t\t\t\trow.push(<Square className={\"squareOff\"}/>)\n\t\t\t\t} else if (turnedOn[j][i] == \"2\") {\n\t\t\t\t\trow.push(<Square className={\"squareHighlight\"}/>)\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t}\n\t  \t\trows.push(<tr>{row}</tr>)\n\t  \t}\n\t\treturn <table><tbody>{rows}</tbody></table>\n\t}\n  \n\trender() {\n\t\tvar turnedOn = this.props.turnedOn\n\t\treturn this.makeGrid(turnedOn)\n\t}\n}","import './App.css';\nimport React from 'react';\nimport { BaseGrid } from './components/BaseGrid.js';\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nclass RandomGrid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      turnedOn: this.fillRandomGrid(this.props.height, this.props.width),\n      count: 0,\n      message: ''\n    }\n  }\n\n  fillRandomGrid(height, width) {\n    var grid = []\n    for (var i=0; i<height; i++) {\n      grid.push([])\n      for (var j=0; j<width; j++) {\n        grid[i].push(this.getRandVal())\n      }\n    }\n    return grid\n  }\n\n  async countIslands() {\n    var grid = this.state.turnedOn\n    console.log(grid)\n    var count = 0\n    for (var i=0; i<grid.length; i++) {\n      for (var j=0; j<grid[i].length; j++) {\n        if (grid[i][j] == '0') {\n          this.setMessage('Searching for Island')\n          await this.flashCell(i, j, 100)\n        }\n        if (grid[i][j] == '1') {\n          count += 1\n          this.setMessage('Island found!')\n          this.incrementCount()\n          await this.flashCell(i,j, 1000)\n          this.setMessage('Clearing island')\n          await this.dfsearch(grid, i, j)\n        }\n      }\n    }\n  }\n  \n  async dfsearch(grid, i, j) {\n    if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length) {\n      return\n    }\n    if (grid[i][j] == '0') {\n      return\n    }\n    await this.flashCell(i, j, 100)\n    grid[i][j] = '0'\n    await this.dfsearch(grid, i+1, j)\n    await this.dfsearch(grid, i-1, j)\n    await this.dfsearch(grid, i, j+1)\n    await this.dfsearch(grid, i, j-1)\n  }\n\n  async oneToZero(i, j) {\n    this.setState((state, props) => {\n      var turnedOn = state.turnedOn\n      turnedOn[i][j] = '0'\n      return {\n        turnedOn: turnedOn,\n      };\n    });\n    await sleep(200)\n  }\n\n  async flashCell(i, j, ms) {\n    var cellValue = this.state.turnedOn[i][j]\n    this.setState((state, props) => {\n      var turnedOn = state.turnedOn\n      turnedOn[i][j] = '2'\n      return {\n        turnedOn: turnedOn,\n      };\n    });\n    await sleep(ms)\n    this.setState((state, props) => {\n      var turnedOn = state.turnedOn\n      turnedOn[i][j] = cellValue\n      return {\n        turnedOn: turnedOn,\n      };\n    });\n  }\n\n  setMessage(message) {\n    this.setState((state, props) => {\n      return {\n        message: message,\n      };\n    });\n  }\n\n  incrementCount() {\n    this.setState((state, props) => {\n      return {\n        count: state.count+1,\n      };\n    });\n  }\n\n  // Randomly returns a 0 or 1\n  getRandVal() {\n    var val = Math.random() < .5 ? '0': '1'\n    return val\n  }\n\n  render() {\n    return <div>\n      <div>{this.state.message}</div>\n      <div>Count: {this.state.count}</div>\n      <BaseGrid turnedOn={this.state.turnedOn}/>\n      <button onClick={this.countIslands.bind(this)}>Click Me</button>\n    </div>\n  }\n}\n\nfunction App() {\n  return (\n      <RandomGrid height={15} width={15}/>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}