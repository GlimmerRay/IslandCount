[{"/Users/brandonhodges/Desktop/ReactApps/island-count/src/index.js":"1","/Users/brandonhodges/Desktop/ReactApps/island-count/src/App.js":"2","/Users/brandonhodges/Desktop/ReactApps/island-count/src/components/BaseGrid.js":"3","/Users/brandonhodges/Desktop/ReactApps/island-count/src/components/Square.js":"4"},{"size":197,"mtime":1611102738132,"results":"5","hashOfConfig":"6"},{"size":2987,"mtime":1611114646444,"results":"7","hashOfConfig":"6"},{"size":987,"mtime":1611113529222,"results":"8","hashOfConfig":"6"},{"size":152,"mtime":1611102425329,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"7hrvqo",{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brandonhodges/Desktop/ReactApps/island-count/src/index.js",[],["21","22"],"/Users/brandonhodges/Desktop/ReactApps/island-count/src/App.js",["23","24","25","26"],"import './App.css';\nimport React from 'react';\nimport { BaseGrid } from './components/BaseGrid.js';\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nclass RandomGrid extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      turnedOn: this.fillRandomGrid(this.props.height, this.props.width),\n      count: 0,\n      message: ''\n    }\n  }\n\n  fillRandomGrid(height, width) {\n    var grid = []\n    for (var i=0; i<height; i++) {\n      grid.push([])\n      for (var j=0; j<width; j++) {\n        grid[i].push(this.getRandVal())\n      }\n    }\n    return grid\n  }\n\n  async countIslands() {\n    var grid = this.state.turnedOn\n    console.log(grid)\n    var count = 0\n    for (var i=0; i<grid.length; i++) {\n      for (var j=0; j<grid[i].length; j++) {\n        if (grid[i][j] == '0') {\n          this.setMessage('Searching for Island')\n          await this.flashCell(i, j, 100)\n        }\n        if (grid[i][j] == '1') {\n          count += 1\n          this.setMessage('Island found!')\n          this.incrementCount()\n          await this.flashCell(i,j, 1000)\n          this.setMessage('Clearing island')\n          await this.dfsearch(grid, i, j)\n        }\n      }\n    }\n  }\n  \n  async dfsearch(grid, i, j) {\n    if (i < 0 || i >= grid.length || j < 0 || j >= grid[i].length) {\n      return\n    }\n    if (grid[i][j] == '0') {\n      return\n    }\n    await this.flashCell(i, j, 100)\n    grid[i][j] = '0'\n    await this.dfsearch(grid, i+1, j)\n    await this.dfsearch(grid, i-1, j)\n    await this.dfsearch(grid, i, j+1)\n    await this.dfsearch(grid, i, j-1)\n  }\n\n  async oneToZero(i, j) {\n    this.setState((state, props) => {\n      var turnedOn = state.turnedOn\n      turnedOn[i][j] = '0'\n      return {\n        turnedOn: turnedOn,\n      };\n    });\n    await sleep(200)\n  }\n\n  async flashCell(i, j, ms) {\n    var cellValue = this.state.turnedOn[i][j]\n    this.setState((state, props) => {\n      var turnedOn = state.turnedOn\n      turnedOn[i][j] = '2'\n      return {\n        turnedOn: turnedOn,\n      };\n    });\n    await sleep(ms)\n    this.setState((state, props) => {\n      var turnedOn = state.turnedOn\n      turnedOn[i][j] = cellValue\n      return {\n        turnedOn: turnedOn,\n      };\n    });\n  }\n\n  setMessage(message) {\n    this.setState((state, props) => {\n      return {\n        message: message,\n      };\n    });\n  }\n\n  incrementCount() {\n    this.setState((state, props) => {\n      return {\n        count: state.count+1,\n      };\n    });\n  }\n\n  // Randomly returns a 0 or 1\n  getRandVal() {\n    var val = Math.random() < .5 ? '0': '1'\n    return val\n  }\n\n  render() {\n    return <div>\n      <div>{this.state.message}</div>\n      <div>Count: {this.state.count}</div>\n      <BaseGrid turnedOn={this.state.turnedOn}/>\n      <button onClick={this.countIslands.bind(this)}>Click Me</button>\n    </div>\n  }\n}\n\nfunction App() {\n  return (\n      <RandomGrid height={15} width={15}/>\n  );\n}\n\nexport default App;\n","/Users/brandonhodges/Desktop/ReactApps/island-count/src/components/BaseGrid.js",["27","28","29"],"import React from 'react';\nimport { Square } from './Square.js';\n\n// Takes a 2d array of 1s and 0s\n// Each row must be of equal length\n// Constructs an html grid of squares with\n// 1s a certain className and 0s another className\nexport class BaseGrid extends React.Component {\n\tconstructor(props) {\n\t  super(props)\n\t  this.state = {\n\t\tturnedOn: this.props.turnedOn\n\t  }\n\t}\n  \n\tmakeGrid(turnedOn) {\n\t  \tvar rows = []\n\t  \tfor (var i=0; i<turnedOn[0].length; i++) {\n\t\t\tvar row = []\n\t\t\tfor (var j=0; j<turnedOn.length; j++) {\n\t\t\t\tif (turnedOn[j][i] == \"1\") {\n\t\t\t\t\trow.push(<Square className={\"squareOn\"}/>)\n\t\t\t\t} else if (turnedOn[j][i] == \"0\") {\n\t\t\t\t\trow.push(<Square className={\"squareOff\"}/>)\n\t\t\t\t} else if (turnedOn[j][i] == \"2\") {\n\t\t\t\t\trow.push(<Square className={\"squareHighlight\"}/>)\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t}\n\t  \t\trows.push(<tr>{row}</tr>)\n\t  \t}\n\t\treturn <table><tbody>{rows}</tbody></table>\n\t}\n  \n\trender() {\n\t\tvar turnedOn = this.props.turnedOn\n\t\treturn this.makeGrid(turnedOn)\n\t}\n}","/Users/brandonhodges/Desktop/ReactApps/island-count/src/components/Square.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":36,"column":24,"nodeType":"36","messageId":"37","endLine":36,"endColumn":26},{"ruleId":"34","severity":1,"message":"35","line":40,"column":24,"nodeType":"36","messageId":"37","endLine":40,"endColumn":26},{"ruleId":"38","severity":1,"message":"39","line":41,"column":11,"nodeType":"40","messageId":"41","endLine":41,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":56,"column":20,"nodeType":"36","messageId":"37","endLine":56,"endColumn":22},{"ruleId":"34","severity":1,"message":"35","line":21,"column":24,"nodeType":"36","messageId":"37","endLine":21,"endColumn":26},{"ruleId":"34","severity":1,"message":"35","line":23,"column":31,"nodeType":"36","messageId":"37","endLine":23,"endColumn":33},{"ruleId":"34","severity":1,"message":"35","line":25,"column":31,"nodeType":"36","messageId":"37","endLine":25,"endColumn":33},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]